/*
import fs from 'node:fs'
import path from 'node:path'
import express from 'express'
import dotenv from 'dotenv'
import cors from 'cors'
import { createClientAndConnect } from './db'
//import * as ReactDOMServer from 'react-dom/server'
//import ReactDOM from 'react-dom/client'
//import React from 'react'
//import {JSDOM} from 'jsdom'

dotenv.config()
process.env.MY_CUSTOM_SECRET = 'API_KEY_qwertyuiop'
const port = Number(process.env.SERVER_PORT) || 3001

export async function createServer(
  //root = process.cwd(),
  isProd = process.env.NODE_ENV === 'production',
  hmrPort= void 0
 ) {
  const app = express();
  app.use(cors())
  const resolve = (p: string) => path.resolve(__dirname, p)
  const indexProd = isProd
    ? fs.readFileSync(resolve('dist/client/index.html'), 'utf-8')
    : ''
  /**
   * @type {import('vite').ViteDevServer}
   */

  
 /*
  let vite:any

  if (!isProd) {
    vite = await (
      await import('vite')
    ).createServer({
      root : void 0,
      server: {
        middlewareMode: true,
        watch: {
          // During tests we edit the files too fast and sometimes chokidar
          // misses change events, so enforce polling for consistency
          usePolling: true,
          interval: 100
        },
        hmr: {
          port: hmrPort
        }
      },
      appType: 'custom'
    })
    // use vite's connect instance as middleware
    app.use(vite.middlewares)
  } else {
//      app.use((await import('compression')).default())
    app.use(
      (await import('serve-static')).default(resolve('dist/client'), {
        index: false
      })
    )
  }

  let template:any;
  let Rend:Function;
//  const Page = require('../client/src/components/not-found/not-found');

  app.use('*', async (req, res) => { 
    try {
      const url = req.originalUrl
      console.log(url);
      if (!isProd) {
        // –ü—Ä–æ–±–ª–µ–º–∞ - —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ sass –µ—Å–ª–∏ –ø—É—Ç–∏ –∏–¥—É—Ç –æ—Ç –∫–æ—Ä–Ω—è –∏ –±–µ–∑ –¥–≤–æ–π–Ω–æ–≥–æ —Å–ª–µ—à–∞ //
        // –ü—Ä–æ–±–ª–µ–º–∞ - –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏ react.render —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –≤–∏–¥–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é window, domjs –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç
        // —Ä–µ—à–µ–Ω–æ —á–µ—Ä–µ–∑ ReactDomServer
        // –ü—Ä–æ–±–ª–µ–º–∞ - –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç–∏–ª–∏.. - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–Ω–¥–µ—Ä 
        // –ü—Ä–æ–±–ª–µ–º–∞ - –Ω–µ –≤–∏–¥–∏—Ç react-redux context - –ø–æ—ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç 
        // –∏ —Ñ—É–Ω–∫—Ü–∏–µ–π hydrate
        // –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç—É—Ç. –ë–µ—Ä–µ–º –∏–∑ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω html
        template = fs.readFileSync(resolve('../client/index.html'), 'utf-8')
        template = await vite.transformIndexHtml(url, template)
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å React (–≤–æ–∑–º–æ–∂–Ω—ã –≤–∞—Ä–∏–Ω—Ç—ã —á—Ç–æ –Ω–∞–¥–æ –≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ)

        let renderReact = require('./entery-server.tsx');
        console.log("renderReact", renderReact);

//        Rend = async function render() {  //url:any, context:any
            // <StaticRouter location={url} context={context}>
            // </StaticRouter>
//          }
        } else {
        template = indexProd
      }
 //     console.log( Rend() );
 //     let window = new JSDOM().window;
//      const reactDiv = React.createElement('div', {}, '');
// console.log(window)
//      ReactDOM.hydrateRoot( window.document, Rend() )

      const context = { url: '' }
      // –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–î–æ–º –≤ —Å—Ç—Ä–æ–∫—É React Element
      //const appHtml = ReactDOMServer.renderToString(render.Rules()) + '(url, context)';
      const appHtml = `Rend()`;
      if (context.url) {
        // Somewhere a `<Redirect>` was rendered
        return res.redirect(301, context.url)
      }
      // –ù—É –∏ –¥–∞–ª–µ–µ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–ø–∏—Ö–∏–≤–∞–µ–º —ç—Ç–æ —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–µ–π—Å, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —á–∞—Å—Ç—å –ª–æ–≤–ª—é –≤–µ—Å—å –±–ª–æ–∫ <div 'root>..
      const html = template.replace(`<div id="root"></div>`,`<div id="root">${appHtml}</div>`)
      res.status(200).set({ 'Content-Type': 'text/html' }).end(html)
    } catch (e:any) {
      !isProd && vite.ssrFixStacktrace(e)
      console.log(e.stack)
      res.status(500).end(e.stack)
    }
  })

  app.listen(port, () => {
    console.log(`  ‚ûú üé∏ Server is listening on port: ${port}`)
  })  

  return { app, vite };
}


createServer().then( () => {
  
  createClientAndConnect()
})
*/